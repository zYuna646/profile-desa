@props(['items', 'title', 'subtitle' => null, 'type' => 'services'])

<section class="py-16 bg-gray-50">
    <div class="container mx-auto px-4">
        <div class="text-center mb-12">
            <h2 class="text-3xl font-bold text-gray-900 mb-4">{{ $title }}</h2>
            @if($subtitle)
                <p class="text-lg text-gray-600 max-w-2xl mx-auto">{{ $subtitle }}</p>
            @endif
        </div>

        @if(count($items) > 0)
            <div class="relative">
                <!-- Slider Container -->
                <div class="slider-container overflow-hidden">
                    <div class="slider-track flex transition-transform duration-500 ease-in-out">
                        @foreach($items as $item)
                            <div class="slider-item flex-shrink-0 w-full md:w-1/2 lg:w-1/3 px-4 mb-8 transition-opacity duration-300">
                                <div class="bg-white rounded-lg shadow-md overflow-hidden h-full flex flex-col">
                                    @if($item->image)
                                        <div class="h-48 overflow-hidden">
                                            <img src="{{ asset('storage/' . $item->image) }}" alt="{{ $item->title }}" class="w-full h-full object-cover transition-transform duration-300 hover:scale-105">
                                        </div>
                                    @else
                                        <div class="h-48 bg-indigo-100 flex items-center justify-center">
                                            <i class="{{ $item->icon ?? ($type === 'services' ? 'fas fa-cog' : 'fas fa-chart-line') }} text-5xl text-indigo-500"></i>
                                        </div>
                                    @endif
                                    <div class="p-6 flex-grow">
                                        <h3 class="text-xl font-semibold text-gray-900 mb-2">{{ $item->title }}</h3>
                                        <p class="text-gray-600">{{ $item->description }}</p>
                                    </div>
                                </div>
                            </div>
                        @endforeach
                    </div>
                </div>

                <!-- Navigation Arrows -->
                <button class="slider-arrow slider-prev absolute top-1/2 left-0 transform -translate-y-1/2 bg-white rounded-full shadow-md p-3 focus:outline-none z-10 hover:bg-gray-100 transition-colors duration-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                    </svg>
                </button>
                <button class="slider-arrow slider-next absolute top-1/2 right-0 transform -translate-y-1/2 bg-white rounded-full shadow-md p-3 focus:outline-none z-10 hover:bg-gray-100 transition-colors duration-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                    </svg>
                </button>

                <!-- Dots Indicator -->
                <div class="slider-dots flex justify-center mt-6 space-x-2">
                    <!-- Dots will be generated by JavaScript -->
                </div>
            </div>

            <script>
                document.addEventListener('DOMContentLoaded', function() {
                    // Initialize all sliders on the page
                    document.querySelectorAll('.slider-container').forEach(function(container, containerIndex) {
                        const track = container.querySelector('.slider-track');
                        const items = container.querySelectorAll('.slider-item');
                        const prevBtn = container.parentElement.querySelector('.slider-prev');
                        const nextBtn = container.parentElement.querySelector('.slider-next');
                        const dotsContainer = container.parentElement.querySelector('.slider-dots');
                        
                        let currentIndex = 0;
                        let itemWidth;
                        let itemsPerView;
                        let autoSlideInterval;
                        let touchStartX = 0;
                        let touchEndX = 0;
                        
                        // Create dots
                        function createDots() {
                            dotsContainer.innerHTML = '';
                            const totalDots = Math.ceil(items.length / itemsPerView);
                            
                            for (let i = 0; i < totalDots; i++) {
                                const dot = document.createElement('button');
                                dot.classList.add('slider-dot', 'w-3', 'h-3', 'rounded-full', 'bg-gray-300', 'focus:outline-none', 'transition-colors', 'duration-300');
                                if (i === 0) dot.classList.add('bg-indigo-500');
                                
                                dot.addEventListener('click', () => {
                                    goToSlide(i * itemsPerView);
                                });
                                
                                dotsContainer.appendChild(dot);
                            }
                        }
                        
                        // Update dots
                        function updateDots() {
                            const dots = dotsContainer.querySelectorAll('.slider-dot');
                            const activeDotIndex = Math.floor(currentIndex / itemsPerView);
                            
                            dots.forEach((dot, i) => {
                                if (i === activeDotIndex) {
                                    dot.classList.remove('bg-gray-300');
                                    dot.classList.add('bg-indigo-500');
                                } else {
                                    dot.classList.remove('bg-indigo-500');
                                    dot.classList.add('bg-gray-300');
                                }
                            });
                        }
                        
                        // Calculate dimensions
                        function calculateDimensions() {
                            const containerWidth = container.clientWidth;
                            
                            // Determine items per view based on screen size
                            if (window.innerWidth >= 1024) { // lg
                                itemsPerView = 3;
                            } else if (window.innerWidth >= 768) { // md
                                itemsPerView = 2;
                            } else { // sm
                                itemsPerView = 1;
                            }
                            
                            itemWidth = containerWidth / itemsPerView;
                            
                            // Set width for each item
                            items.forEach(item => {
                                item.style.width = `${itemWidth}px`;
                            });
                            
                            // Update track position for current index
                            goToSlide(currentIndex);
                            createDots();
                        }
                        
                        // Go to specific slide
                        function goToSlide(index) {
                            // Ensure index is within bounds
                            if (index < 0) {
                                index = 0;
                            } else if (index > items.length - itemsPerView) {
                                index = items.length - itemsPerView;
                            }
                            
                            currentIndex = index;
                            const translateX = -currentIndex * itemWidth;
                            track.style.transform = `translateX(${translateX}px)`;
                            updateDots();
                        }
                        
                        // Next slide
                        function nextSlide() {
                            goToSlide(currentIndex + 1);
                        }
                        
                        // Previous slide
                        function prevSlide() {
                            goToSlide(currentIndex - 1);
                        }
                        
                        // Start auto sliding
                        function startAutoSlide() {
                            stopAutoSlide();
                            autoSlideInterval = setInterval(() => {
                                if (currentIndex >= items.length - itemsPerView) {
                                    goToSlide(0);
                                } else {
                                    nextSlide();
                                }
                            }, 5000); // Change slide every 5 seconds
                        }
                        
                        // Stop auto sliding
                        function stopAutoSlide() {
                            if (autoSlideInterval) {
                                clearInterval(autoSlideInterval);
                            }
                        }
                        
                        // Touch events for mobile swipe
                        container.addEventListener('touchstart', (e) => {
                            touchStartX = e.changedTouches[0].screenX;
                            stopAutoSlide();
                        }, { passive: true });
                        
                        container.addEventListener('touchend', (e) => {
                            touchEndX = e.changedTouches[0].screenX;
                            handleSwipe();
                            startAutoSlide();
                        }, { passive: true });
                        
                        function handleSwipe() {
                            const swipeThreshold = 50;
                            const diff = touchStartX - touchEndX;
                            
                            if (diff > swipeThreshold) {
                                // Swiped left, go to next
                                nextSlide();
                            } else if (diff < -swipeThreshold) {
                                // Swiped right, go to previous
                                prevSlide();
                            }
                        }
                        
                        // Event listeners
                        prevBtn.addEventListener('click', () => {
                            prevSlide();
                            stopAutoSlide();
                            startAutoSlide();
                        });
                        
                        nextBtn.addEventListener('click', () => {
                            nextSlide();
                            stopAutoSlide();
                            startAutoSlide();
                        });
                        
                        // Handle resize
                        window.addEventListener('resize', calculateDimensions);
                        
                        // Initialize
                        calculateDimensions();
                        startAutoSlide();
                        
                        // Pause auto slide when hovering
                        container.addEventListener('mouseenter', stopAutoSlide);
                        container.addEventListener('mouseleave', startAutoSlide);
                    });
                });
            </script>
        @else
            <div class="text-center text-gray-500">
                <p>Tidak ada data {{ $type === 'services' ? 'layanan' : 'potensi' }} yang tersedia.</p>
            </div>
        @endif
    </div>
</section>